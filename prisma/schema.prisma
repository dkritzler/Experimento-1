// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User and Profile Models
model User {
  id          String   @id @default(cuid())
  email       String   @unique
  name        String
  avatar      String?
  password    String?  // For credentials login
  emailVerified DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  profile     UserProfile?
  meals       Meal[]
  symptoms    Symptom[]
  patterns    Pattern[]
  microbiome  MicrobiomeData[]
  savedRecipes Recipe[]
  savedProducts Product[]
  
  // Auth
  accounts    Account[]
  sessions    Session[]
  
  @@map("users")
}

model UserProfile {
  id                   String   @id @default(cuid())
  userId               String   @unique
  age                  Int?
  gender               Gender?
  height               Float?   // in cm
  weight               Float?   // in kg
  dietaryRestrictions  String[]
  allergies            String[]
  healthGoals          String[]
  microbiomeScore      Float?
  lastAnalysis         DateTime?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_profiles")
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

// Food and Meal Models
model Food {
  id               String            @id @default(cuid())
  name             String
  category         FoodCategory
  allergens        Allergen[]
  nutritionalInfo  NutritionalInfo?
  commonTriggers   String[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  
  // Relations
  mealFoods MealFood[]
  
  @@map("foods")
}

model NutritionalInfo {
  id       String @id @default(cuid())
  foodId   String @unique
  calories Float
  protein  Float  // in grams
  carbs    Float  // in grams
  fat      Float  // in grams
  fiber    Float  // in grams
  sugar    Float  // in grams
  
  food Food @relation(fields: [foodId], references: [id], onDelete: Cascade)
  
  @@map("nutritional_info")
}

model Meal {
  id        String      @id @default(cuid())
  userId    String
  timestamp DateTime
  portion   PortionSize
  notes     String?
  mood      Int         // 1-5 mood rating
  location  String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  
  // Relations
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  foods     MealFood[]
  
  @@map("meals")
}

model MealFood {
  id       String @id @default(cuid())
  mealId   String
  foodId   String
  quantity Float
  unit     String
  
  // Relations
  meal Meal @relation(fields: [mealId], references: [id], onDelete: Cascade)
  food Food @relation(fields: [foodId], references: [id], onDelete: Cascade)
  
  @@map("meal_foods")
}

enum FoodCategory {
  GRAINS
  DAIRY
  FRUITS
  VEGETABLES
  PROTEINS
  LEGUMES
  NUTS
  BEVERAGES
  PROCESSED
  FERMENTED
}

enum Allergen {
  GLUTEN
  DAIRY
  NUTS
  SOY
  EGGS
  SHELLFISH
  FISH
}

enum PortionSize {
  SMALL
  MEDIUM
  LARGE
  EXTRA_LARGE
}

// Symptom Models
model Symptom {
  id        String      @id @default(cuid())
  userId    String
  timestamp DateTime
  type      SymptomType
  severity  Int         // 1-5 severity level
  duration  Int?        // in minutes
  notes     String?
  triggers  String[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("symptoms")
}

enum SymptomType {
  BLOATING
  GAS
  STOMACH_PAIN
  NAUSEA
  DIARRHEA
  CONSTIPATION
  HEARTBURN
  FATIGUE
  HEADACHE
  SKIN_ISSUES
  MOOD_CHANGES
}

// Pattern Analysis Models
model Pattern {
  id          String      @id @default(cuid())
  userId      String
  type        PatternType
  trigger     String
  response    String
  confidence  Float       // 0-100
  occurrences Int
  firstSeen   DateTime
  lastSeen    DateTime
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, trigger])
  @@map("patterns")
}

enum PatternType {
  CORRELATION
  TIMING
  POSITIVE
  CYCLE
}

// Microbiome Models
model MicrobiomeData {
  id              String                    @id @default(cuid())
  userId          String
  testDate        DateTime
  diversity       Float
  balance         Float
  recommendations String[]
  createdAt       DateTime                  @default(now())
  updatedAt       DateTime                  @updatedAt
  
  // Relations
  user     User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  bacteria BacteriaProfile[]
  
  @@map("microbiome_data")
}

model BacteriaProfile {
  id             String         @id @default(cuid())
  microbiomeId   String
  name           String
  percentage     Float
  type           BacteriaType
  trend          TrendDirection
  description    String?
  
  // Relations
  microbiome MicrobiomeData @relation(fields: [microbiomeId], references: [id], onDelete: Cascade)
  
  @@map("bacteria_profiles")
}

enum BacteriaType {
  BENEFICIAL
  NEUTRAL
  HARMFUL
}

enum TrendDirection {
  INCREASING
  STABLE
  DECREASING
}

// Recipe and Product Models
model Recipe {
  id           String   @id @default(cuid())
  title        String
  description  String
  imageUrl     String?
  cookTime     Int      // in minutes
  servings     Int
  difficulty   Difficulty
  benefits     String[]
  ingredients  String[]
  instructions String[]
  gutHealthScore Float  // 0-100
  tags         String[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  savedByUsers User[]
  
  @@map("recipes")
}

model Product {
  id          String      @id @default(cuid())
  name        String
  brand       String?
  type        ProductType
  description String
  benefits    String[]
  dosage      String?
  price       Float
  rating      Float
  reviewCount Int         @default(0)
  link        String?
  imageUrl    String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Relations
  savedByUsers User[]
  
  @@map("products")
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum ProductType {
  PROBIOTIC
  PREBIOTIC
  SUPPLEMENT
  FOOD
}

// NextAuth Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  
  @@unique([identifier, token])
  @@map("verification_tokens")
}
